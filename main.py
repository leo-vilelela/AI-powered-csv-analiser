import os
import streamlit as interface
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from groq import Groq
import io
import base64
import json
from datetime import datetime
from dotenv import load_dotenv

# Configura√ß√£o inicial
load_dotenv()

class SistemaMemoria:
    def __init__(self):
        self.historico_analises = []
        self.insights_coletados = []
        self.padroes_detectados = []
        self.conclusoes_gerais = []
        self.contador_interacoes = 0
    
    def registrar_analise(self, pergunta, resposta, metrica=None):
        registro = {
            "timestamp": datetime.now().isoformat(),
            "pergunta": pergunta,
            "resposta": resposta,
            "metrica": metrica,
            "tipo_analise": self._classificar_analise(pergunta)
        }
        self.historico_analises.append(registro)
        self.contador_interacoes += 1
        
        # Extrai insights automaticamente da resposta
        self._extrair_insights(resposta, pergunta)
    
    def _classificar_analise(self, pergunta):
        pergunta_lower = pergunta.lower()
        if any(palavra in pergunta_lower for palavra in ['distribui√ß√£o', 'histograma', 'frequ√™ncia']):
            return "distribuicao"
        elif any(palavra in pergunta_lower for palavra in ['correla√ß√£o', 'rela√ß√£o', 'associa√ß√£o']):
            return "correlacao"
        elif any(palavra in pergunta_lower for palavra in ['tend√™ncia', 'evolu√ß√£o', 'tempo']):
            return "tendencia"
        elif any(palavra in pergunta_lower for palavra in ['compara√ß√£o', 'diferen√ßa', 'categoria']):
            return "comparacao"
        else:
            return "geral"
    
    def _extrair_insights(self, resposta, pergunta):
        # Analisa a resposta para extrair insights importantes
        insights_potenciais = [
            "alta", "baixa", "aumento", "diminui√ß√£o", "correla√ß√£o", "significante",
            "outlier", "padr√£o", "tend√™ncia", "maior", "menor", "m√°ximo", "m√≠nimo"
        ]
        
        resposta_lower = resposta.lower()
        for insight in insights_potenciais:
            if insight in resposta_lower:
                insight_registro = {
                    "timestamp": datetime.now().isoformat(),
                    "insight": insight,
                    "contexto": pergunta[:100],  # Primeiros 100 caracteres
                    "resumo": self._resumir_insight(resposta, insight)
                }
                if insight_registro not in self.insights_coletados:
                    self.insights_coletados.append(insight_registro)
    
    def _resumir_insight(self, resposta, palavra_chave):
        # Cria um resumo do insight encontrado
        sentences = resposta.split('.')
        for sentence in sentences:
            if palavra_chave in sentence.lower():
                return sentence.strip()
        return resposta[:150] + "..."
    
    def adicionar_padrao(self, tipo_padrao, descricao, dados_suporte):
        padrao = {
            "tipo": tipo_padrao,
            "descricao": descricao,
            "dados_suporte": dados_suporte,
            "timestamp": datetime.now().isoformat()
        }
        self.padroes_detectados.append(padrao)
    
    def adicionar_conclusao(self, conclusao, nivel_confianca="medio"):
        conclusao_registro = {
            "conclusao": conclusao,
            "nivel_confianca": nivel_confianca,
            "timestamp": datetime.now().isoformat(),
            "base_analise": len(self.historico_analises)
        }
        self.conclusoes_gerais.append(conclusao_registro)
    
    def obter_resumo_conclusoes(self):
        if not self.conclusoes_gerais and not self.insights_coletados:
            return "Ainda n√£o foram identificadas conclus√µes significativas. Fa√ßa mais an√°lises para gerar insights."
        
        resumo = "## üìä Conclus√µes e Insights Obtidos\n\n"
        
        if self.conclusoes_gerais:
            resumo += "### Principais Conclus√µes:\n"
            for i, conclusao in enumerate(self.conclusoes_gerais[-5:], 1):  # √öltimas 5 conclus√µes
                resumo += f"{i}. {conclusao['conclusao']} (Confian√ßa: {conclusao['nivel_confianca']})\n"
        
        if self.insights_coletados:
            resumo += "\n### Insights Detectados:\n"
            insights_unicos = {}
            for insight in self.insights_coletados:
                chave = insight['insight']
                if chave not in insights_unicos:
                    insights_unicos[chave] = insight['resumo']
            
            for insight, descricao in list(insights_unicos.items())[:5]:
                resumo += f"‚Ä¢ **{insight.title()}**: {descricao}\n"
        
        resumo += f"\n*Baseado em {self.contador_interacoes} an√°lises realizadas*"
        return resumo
    
    def obter_historico_recente(self, limite=5):
        return self.historico_analises[-limite:]
    
    def limpar_memoria(self):
        self.historico_analises.clear()
        self.insights_coletados.clear()
        self.padroes_detectados.clear()
        self.conclusoes_gerais.clear()
        self.contador_interacoes = 0

class AnalisadorDadosInteligente:
    def __init__(self, chave_api):
        self.cliente = Groq(api_key=chave_api)
        self.conjunto_dados = None
        self.memoria = SistemaMemoria()
    
    def carregar_informacoes(self, dataframe):
        self.conjunto_dados = dataframe
        self.memoria.limpar_memoria()  # Limpa mem√≥ria ao carregar novo dataset
        
        # An√°lise inicial autom√°tica do dataset
        analise_inicial = self._realizar_analise_inicial()
        self.memoria.adicionar_conclusao(analise_inicial, "alto")
    
    def _realizar_analise_inicial(self):
        """Realiza uma an√°lise inicial autom√°tica do dataset"""
        if self.conjunto_dados is None:
            return "Dataset n√£o carregado"
        
        try:
            colunas_numericas = self.conjunto_dados.select_dtypes(include=['number']).columns
            colunas_categoricas = self.conjunto_dados.select_dtypes(include=['object']).columns
            
            conclusoes = []
            
            if len(colunas_numericas) > 0:
                conclusoes.append(f"Dataset cont√©m {len(colunas_numericas)} vari√°veis num√©ricas")
                # Detecta poss√≠veis outliers
                for coluna in colunas_numericas[:3]:  # Analisa as 3 primeiras
                    q1 = self.conjunto_dados[coluna].quantile(0.25)
                    q3 = self.conjunto_dados[coluna].quantile(0.75)
                    iqr = q3 - q1
                    outliers = self.conjunto_dados[
                        (self.conjunto_dados[coluna] < (q1 - 1.5 * iqr)) | 
                        (self.conjunto_dados[coluna] > (q3 + 1.5 * iqr))
                    ]
                    if len(outliers) > 0:
                        conclusoes.append(f"Poss√≠veis outliers detectados em {coluna}")
            
            if len(colunas_categoricas) > 0:
                conclusoes.append(f"Dataset cont√©m {len(colunas_categoricas)} vari√°veis categ√≥ricas")
            
            if len(self.conjunto_dados) > 1000:
                conclusoes.append("Dataset de grande porte - amostra significativa")
            elif len(self.conjunto_dados) < 100:
                conclusoes.append("Dataset pequeno - cuidado com generaliza√ß√µes")
            
            return "; ".join(conclusoes)
            
        except Exception as e:
            return f"An√°lise inicial b√°sica: {len(self.conjunto_dados)} registros carregados"

    def obter_resposta(self, pergunta):
        if self.conjunto_dados is None:
            return "Por favor, carregue um arquivo CSV primeiro.", None
        
        # Prepara contexto com hist√≥rico de an√°lises
        contexto_historico = self._preparar_contexto_historico()
        
        # Prepara contexto sobre os dados
        contexto_dados = f"""
        Informa√ß√µes do dataset:
        - Formato: {self.conjunto_dados.shape}
        - Colunas: {list(self.conjunto_dados.columns)}
        - Primeiras linhas:
        {self.conjunto_dados.head().to_string()}
        - Estat√≠sticas descritivas:
        {self.conjunto_dados.describe().to_string()}
        """
        
        prompt_completo = f"""
        {contexto_historico}
        
        {contexto_dados}
        
        Pergunta atual: {pergunta}
        
        Com base no hist√≥rico de an√°lises e nos dados atuais, forne√ßa uma resposta completa.
        Considere padr√µes j√° identificados e conclus√µes anteriores.
        """
        
        try:
            # Consulta ao Groq
            resposta = self.cliente.chat.completions.create(
                messages=[
                    {
                        "role": "system",
                        "content": """Voc√™ √© um especialista em an√°lise de dados com mem√≥ria contextual. 
                        Use o hist√≥rico de an√°lises para enriquecer suas respostas.
                        Identifique padr√µes, tend√™ncias e rela√ß√µes nos dados.
                        Ao final de cada an√°lise, sugira pr√≥ximos passos ou perguntas relacionadas."""
                    },
                    {
                        "role": "user", 
                        "content": prompt_completo
                    }
                ],
                model="llama-3.1-8b-instant",
                temperature=0.3,
                max_tokens=1024
            )
            
            texto_resposta = resposta.choices[0].message.content
            
            # Registra a an√°lise na mem√≥ria
            self.memoria.registrar_analise(pergunta, texto_resposta)
            
            # Gera visualiza√ß√£o
            visualizacao = self._criar_visualizacao(pergunta, texto_resposta)
            
            # Atualiza conclus√µes baseadas na nova an√°lise
            self._atualizar_conclusoes(pergunta, texto_resposta)
            
            return texto_resposta, visualizacao
            
        except Exception as erro:
            return f"Erro ao processar pergunta: {str(erro)}", None
    
    def _preparar_contexto_historico(self):
        """Prepara o contexto do hist√≥rico de an√°lises para o prompt"""
        historico_recente = self.memoria.obter_historico_recente(3)  # √öltimas 3 an√°lises
        
        if not historico_recente:
            return "N√£o h√° hist√≥rico anterior de an√°lises."
        
        contexto = "### Hist√≥rico Recente de An√°lises:\n"
        for i, analise in enumerate(historico_recente, 1):
            contexto += f"{i}. Pergunta: {analise['pergunta']}\n"
            contexto += f"   Tipo: {analise['tipo_analise']}\n"
            contexto += f"   Resumo: {analise['resposta'][:200]}...\n\n"
        
        return contexto
    
    def _atualizar_conclusoes(self, pergunta, resposta):
        """Atualiza conclus√µes baseadas na nova an√°lise"""
        # Detecta conclus√µes importantes na resposta
        marcadores_conclusao = [
            "conclu√≠mos que", "portanto", "dessa forma", "em resumo", 
            "isso indica que", "sugere que", "evidencia", "demonstra"
        ]
        
        resposta_lower = resposta.lower()
        for marcador in marcadores_conclusao:
            if marcador in resposta_lower:
                # Extrai a senten√ßa contendo a conclus√£o
                sentences = resposta.split('.')
                for sentence in sentences:
                    if marcador in sentence.lower():
                        self.memoria.adicionar_conclusao(sentence.strip(), "medio")
                        break
    
    def _criar_visualizacao(self, pergunta, resposta):
        try:
            figura, eixo = plt.subplots(figsize=(10, 6))
            
            pergunta_lower = pergunta.lower()
            colunas_numericas = self.conjunto_dados.select_dtypes(include=['number']).columns
            
            if len(colunas_numericas) > 0:
                coluna_alvo = colunas_numericas[0]
                
                if any(palavra in pergunta_lower for palavra in ['distribui√ß√£o', 'histograma', 'frequ√™ncia']):
                    self.conjunto_dados[coluna_alvo].hist(ax=eixo, bins=15, alpha=0.7, color='skyblue')
                    eixo.set_title(f'Distribui√ß√£o de {coluna_alvo}')
                    eixo.set_ylabel('Frequ√™ncia')
                    eixo.grid(True, alpha=0.3)
                
                elif any(palavra in pergunta_lower for palavra in ['correla√ß√£o', 'rela√ß√£o', 'associa√ß√£o']):
                    if len(colunas_numericas) >= 2:
                        sns.scatterplot(data=self.conjunto_dados, x=colunas_numericas[0], y=colunas_numericas[1], ax=eixo)
                        eixo.set_title(f'Rela√ß√£o entre {colunas_numericas[0]} e {colunas_numericas[1]}')
                        eixo.grid(True, alpha=0.3)
                    else:
                        # Fallback para histograma
                        self.conjunto_dados[coluna_alvo].hist(ax=eixo, bins=15, alpha=0.7)
                        eixo.set_title(f'Distribui√ß√£o de {coluna_alvo}')
                
                elif any(palavra in pergunta_lower for palavra in ['boxplot', 'outlier', 'dispers√£o']):
                    sns.boxplot(data=self.conjunto_dados[coluna_alvo], ax=eixo)
                    eixo.set_title(f'Boxplot de {coluna_alvo}')
                    eixo.grid(True, alpha=0.3)
                
                else:
                    # Gr√°fico de barras para colunas categ√≥ricas ou linha temporal
                    colunas_categoricas = self.conjunto_dados.select_dtypes(include=['object']).columns
                    if len(colunas_categoricas) > 0:
                        coluna_cat = colunas_categoricas[0]
                        contagem = self.conjunto_dados[coluna_cat].value_counts().head(10)
                        contagem.plot(kind='bar', ax=eixo, color='lightgreen')
                        eixo.set_title(f'Top 10 Valores em {coluna_cat}')
                        eixo.tick_params(axis='x', rotation=45)
                        eixo.grid(True, alpha=0.3)
                    else:
                        # Gr√°fico de linha para tend√™ncias temporais
                        if len(self.conjunto_dados) > 1:
                            self.conjunto_dados[coluna_alvo].plot(ax=eixo, marker='o')
                            eixo.set_title(f'Tend√™ncia de {coluna_alvo}')
                            eixo.grid(True, alpha=0.3)
            
            plt.tight_layout()
            
            # Converter para base64
            buffer = io.BytesIO()
            figura.savefig(buffer, format='png', dpi=300, bbox_inches='tight')
            buffer.seek(0)
            imagem_base64 = base64.b64encode(buffer.read()).decode()
            plt.close(figura)
            
            return f"data:image/png;base64,{imagem_base64}"
            
        except Exception as erro:
            print(f"Erro ao criar visualiza√ß√£o: {erro}")
            return None
    
    def obter_conclusoes(self):
        return self.memoria.obter_resumo_conclusoes()
    
    def limpar_memoria(self):
        self.memoria.limpar_memoria()

class GerenciadorConversa:
    def __init__(self):
        self.registros = []
    
    def adicionar_mensagem(self, emissor, conteudo, imagem=None):
        self.registros.append({
            "emissor": emissor,
            "conteudo": conteudo,
            "imagem": imagem,
            "timestamp": datetime.now().isoformat()
        })

# Configura√ß√£o da interface
interface.set_page_config(
    page_title="Analisador Inteligente com Mem√≥ria", 
    layout="wide",
    page_icon="üß†"
)

interface.title("üß† Analisador Inteligente com Mem√≥ria Contextual")

# Inicializa√ß√£o na sess√£o
if "analisador_inteligente" not in interface.session_state:
    chave_groq = os.getenv("GROQ_API_KEY")
    print(chave_groq)
    if not chave_groq:
        interface.error("GROQ_API_KEY n√£o encontrada nas vari√°veis de ambiente")
    interface.session_state.analisador_inteligente = AnalisadorDadosInteligente(chave_groq)

if "gerenciador_dialogo" not in interface.session_state:
    interface.session_state.gerenciador_dialogo = GerenciadorConversa()

if "dados_carregados" not in interface.session_state:
    interface.session_state.dados_carregados = None

# Mensagem inicial
if len(interface.session_state.gerenciador_dialogo.registros) == 0:
    interface.session_state.gerenciador_dialogo.adicionar_mensagem(
        "assistente", 
        "Ol√°! Sou um analisador inteligente com mem√≥ria. Envie um CSV e fa√ßa perguntas - vou lembrar das an√°lises anteriores para dar respostas contextuais! üß†"
    )

# Layout principal
col_principal, col_lateral = interface.columns([3, 1])

with col_lateral:
    interface.header("üîß Controles")
    
    # Bot√£o para ver conclus√µes
    if interface.button("üìä Ver Conclus√µes", use_container_width=True):
        if interface.session_state.analisador_inteligente.conjunto_dados is not None:
            conclusoes = interface.session_state.analisador_inteligente.obter_conclusoes()
            interface.session_state.gerenciador_dialogo.adicionar_mensagem("assistente", conclusoes)
    
    # Bot√£o para limpar mem√≥ria
    if interface.button("üóëÔ∏è Limpar Mem√≥ria", use_container_width=True):
        interface.session_state.analisador_inteligente.limpar_memoria()
        interface.session_state.gerenciador_dialogo.adicionar_mensagem(
            "assistente", 
            "Mem√≥ria limpa! Come√ßando uma nova sess√£o de an√°lise."
        )
        interface.rerun()
    
    interface.markdown("---")
    
    # √Årea de upload
    interface.header("üìÅ Carregar Dados")
    arquivo_submetido = interface.file_uploader(
        "Selecionar arquivo CSV",
        type=["csv"],
        help="Carregue um dataset para an√°lise",
        key="uploader_csv"
    )
    
    if arquivo_submetido and interface.session_state.dados_carregados is None:
        with interface.spinner("Analisando dataset..."):
            dados = pd.read_csv(arquivo_submetido)
            interface.session_state.analisador_inteligente.carregar_informacoes(dados)
            interface.session_state.dados_carregados = dados
            
            interface.success(f"‚úÖ Dataset carregado: {dados.shape[0]} linhas √ó {dados.shape[1]} colunas")
            
            # Mensagem de confirma√ß√£o com an√°lise inicial
            resumo_inicial = f"""
            Dataset '{arquivo_submetido.name}' carregado com sucesso! 

            **Resumo inicial:**
            - Dimens√µes: {dados.shape[0]} linhas √ó {dados.shape[1]} colunas
            - Mem√≥ria contextual ativada
            - An√°lise inicial conclu√≠da

            Fa√ßa perguntas sobre os dados e eu vou me lembrar das an√°lises anteriores!
            """
            
            interface.session_state.gerenciador_dialogo.adicionar_mensagem(
                "assistente",
                resumo_inicial
            )

    # Estat√≠sticas da sess√£o
    if interface.session_state.dados_carregados is not None:
        interface.markdown("---")
        interface.header("üìà Estat√≠sticas")
        dados = interface.session_state.dados_carregados
        analisador = interface.session_state.analisador_inteligente
        
        col1, col2 = interface.columns(2)
        col1.metric("Linhas", dados.shape[0])
        col2.metric("Colunas", dados.shape[1])
        
        interface.metric("An√°lises Realizadas", analisador.memoria.contador_interacoes)
        interface.metric("Insights Coletados", len(analisador.memoria.insights_coletados))

with col_principal:
    interface.header("üí¨ An√°lise Contextual com Mem√≥ria")
    
    # Exibir hist√≥rico de conversa
    for mensagem in interface.session_state.gerenciador_dialogo.registros:
        with interface.chat_message(mensagem["emissor"]):
            interface.markdown(mensagem["conteudo"])
            if mensagem["imagem"]:
                interface.image(mensagem["imagem"], use_container_width=True)

    # Entrada do usu√°rio
    entrada_usuario = interface.chat_input(
        "Digite sua pergunta sobre os dados...",
        disabled=interface.session_state.dados_carregados is None
    )

    if entrada_usuario:
        # Adiciona pergunta do usu√°rio
        interface.session_state.gerenciador_dialogo.adicionar_mensagem("usuario", entrada_usuario)
        
        with interface.chat_message("usuario"):
            interface.markdown(entrada_usuario)
        
        # Processa a resposta
        with interface.chat_message("assistente"):
            with interface.spinner("Analisando com contexto anterior..."):
                texto_resposta, grafico = interface.session_state.analisador_inteligente.obter_resposta(entrada_usuario)
            
            interface.markdown(texto_resposta)
            if grafico:
                interface.image(grafico, use_container_width=True)
        
        # Armazena resposta no hist√≥rico
        interface.session_state.gerenciador_dialogo.adicionar_mensagem("assistente", texto_resposta, grafico)

# Rodap√© com informa√ß√µes da mem√≥ria
if interface.session_state.dados_carregados is not None:
    interface.markdown("---")
    col1, col2, col3 = interface.columns(3)
    
    analisador = interface.session_state.analisador_inteligente
    col1.metric("Intera√ß√µes", analisador.memoria.contador_interacoes)
    col2.metric("Conclus√µes", len(analisador.memoria.conclusoes_gerais))
    col3.metric("Insights", len(analisador.memoria.insights_coletados))

# Exemplos de perguntas
with col_lateral:
    interface.markdown("---")
    interface.header("üí° Perguntas Sugeridas")
    interface.markdown("""
    - Qual a distribui√ß√£o dos dados?
    - Existe correla√ß√£o entre vari√°veis?
    - Quais s√£o os outliers?
    - Mostre tend√™ncias temporais
    - Compare categorias
    - **Quais suas conclus√µes?** ‚Üê Novo!
    """)